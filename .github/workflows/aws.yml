
name: Deploy to Amazon ECS
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:

  migrate:
     runs-on: ubuntu-latest
     steps:
      - uses: actions/checkout@v2
      - name: Run production migration
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma migrate deploy --preview-feature
            
      - name: get migration id and push it into github_env
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        if: failure()
        id: npx
        run: |            
            cd /home/runner/work/mvp/mvp/prisma/migrations 
            ls -d */  > errors.txt
            INIT=$(sed '1!d ; s/.$//' /home/runner/work/mvp/mvp/prisma/migrations/errors.txt)
            echo "{INIT}={$INIT}" 
            WALLET_ADDRESSES=$(sed '2!d ; s/.$//' /home/runner/work/mvp/mvp/prisma/migrations/errors.txt)
            echo "{WALLET_ADDRESSES}={$WALLET_ADDRESSES}" 
            KUDOS=$(sed '3!d ; s/.$//' /home/runner/work/mvp/mvp/prisma/migrations/errors.txt)
            echo "{KUDOS}={$KUDOS}" 
            cd /home/runner/work/mvp/mvp
           
      - name: kudos
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        if: always()
        run: npx prisma migrate resolve --rolled-back ${{ env.KUDOS }}
        continue-on-error: true
         
      - name: kudos1
        env:
         DATABASE_URL: ${{ secrets.DATABASE_URL }}
        if: always()
        run: npx prisma migrate resolve --rolled-back ${{ env.WALLET_ADDRESSES }}
        continue-on-error: true

      - name: kudos2
        env:
         DATABASE_URL: ${{ secrets.DATABASE_URL }}
        if: always()
        run: npx prisma migrate resolve --rolled-back ${{ env.INIT }}
        continue-on-error: true
         
